package com.wednesdaybeers.reversedraw.client.gui;

import com.wednesdaybeers.reversedraw.client.model.Basket;
import com.wednesdaybeers.reversedraw.client.model.Ticket;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

public class MainGUI implements ActionListener, RandomnessPanel.Listener {
    private JLabel ticketsRemaining;
    private JPanel randomnessPanel;
    private JButton drawButton;
    private JPanel mainPanel;
    private JTable participantTable;
    private JLabel toDrawLabel;

    private List<Ticket> tickets = new ArrayList<>();
    private ParticipantTableModel participantTableModel;
    private Basket basket;
    private ImageIcon worriedIcon;
    private ImageIcon deadIcon;
    private int leftToDraw;

    public MainGUI(Basket basket) throws IOException {
        this.basket = basket;
        $$$setupUI$$$();
        participantTableModel = new ParticipantTableModel(basket.getTickets());
        participantTable.setModel(participantTableModel);
        ticketsRemaining.setText(Integer.toString(basket.getNumTickets()));
        leftToDraw = basket.getLeftToDraw();
        drawButton.addActionListener(this);
        drawButton.setEnabled(false);
        toDrawLabel.setText(Integer.toString(leftToDraw));

        worriedIcon = new ImageIcon(ImageIO.read(ClassLoader.getSystemResource("Worried_Emoji_large.png")));
        deadIcon = new ImageIcon(ImageIO.read(ClassLoader.getSystemResource("Crying_Face_Emoji_large.png")));
    }

    public JPanel getMainPanel() {
        return mainPanel;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == drawButton) {
            Ticket ticket = basket.draw();
            int leftToDraw = basket.getLeftToDraw();
            participantTableModel.update();
            ticketsRemaining.setText(Integer.toString(basket.getNumTickets()));
            toDrawLabel.setText(Integer.toString(leftToDraw));
            mainPanel.repaint();
            ((RandomnessPanel) randomnessPanel).reset();
            drawButton.setEnabled(false);
            int left = basket.ticketsLeft(ticket.getName());
            if (left == 0) {
                JOptionPane.showMessageDialog(mainPanel,
                        ticket.getName() + " just had their last ticket picked!",
                        "Bye-bye, " + ticket.getName(),
                        JOptionPane.ERROR_MESSAGE, deadIcon);

            } else {
                JOptionPane.showMessageDialog(mainPanel,
                        ticket.getName() + " just had a ticket picked, but still has " + left + " left.",
                        "Uh-oh, " + ticket.getName(),
                        JOptionPane.INFORMATION_MESSAGE, worriedIcon);
            }
            if (leftToDraw == 0) {
                ((RandomnessPanel) randomnessPanel).finished();
            }
        }
    }

    @Override
    public void ready(long seed) {
        basket.setSeed(seed);
        drawButton.setEnabled(true);
    }

    private void createUIComponents() {
        randomnessPanel = new RandomnessPanel(this);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridBagLayout());
        mainPanel.setMinimumSize(new Dimension(343, 300));
        mainPanel.setVerifyInputWhenFocusTarget(false);
        final JLabel label1 = new JLabel();
        label1.setText("Tickets remaining:");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label1, gbc);
        ticketsRemaining = new JLabel();
        ticketsRemaining.setText("n/a");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 1;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(ticketsRemaining, gbc);
        final JPanel spacer1 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 3;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer1, gbc);
        final JPanel spacer2 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 2;
        gbc.gridy = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer2, gbc);
        randomnessPanel.setMinimumSize(new Dimension(200, 100));
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 4;
        gbc.weightx = 0.5;
        gbc.weighty = 1.0;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(randomnessPanel, gbc);
        drawButton = new JButton();
        drawButton.setText("Draw a ticket!");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 4;
        gbc.weightx = 0.2;
        gbc.weighty = 0.2;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(drawButton, gbc);
        final JScrollPane scrollPane1 = new JScrollPane();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 5;
        gbc.gridwidth = 3;
        gbc.weighty = 0.5;
        gbc.fill = GridBagConstraints.BOTH;
        mainPanel.add(scrollPane1, gbc);
        participantTable = new JTable();
        participantTable.setFillsViewportHeight(true);
        participantTable.setIntercellSpacing(new Dimension(10, 10));
        participantTable.setRequestFocusEnabled(false);
        participantTable.setRowHeight(25);
        participantTable.setRowSelectionAllowed(false);
        scrollPane1.setViewportView(participantTable);
        final JPanel spacer3 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 0;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer3, gbc);
        final JPanel spacer4 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 6;
        gbc.fill = GridBagConstraints.VERTICAL;
        mainPanel.add(spacer4, gbc);
        final JPanel spacer5 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer5, gbc);
        final JPanel spacer6 = new JPanel();
        gbc = new GridBagConstraints();
        gbc.gridx = 4;
        gbc.gridy = 4;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        mainPanel.add(spacer6, gbc);
        final JLabel label2 = new JLabel();
        label2.setText("Left to draw today:");
        gbc = new GridBagConstraints();
        gbc.gridx = 1;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(label2, gbc);
        toDrawLabel = new JLabel();
        toDrawLabel.setText("n/a");
        gbc = new GridBagConstraints();
        gbc.gridx = 3;
        gbc.gridy = 2;
        gbc.anchor = GridBagConstraints.WEST;
        mainPanel.add(toDrawLabel, gbc);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
